(defun parse-variable-type (expr-list var-name type &optional (signature nil))
  (let ((code-type ""))
    ;; basic type ?
    (if (is-type-p type)
        (progn
          (cond ((search "'" type)
                 (setf code-type (format nil "node_~a*"
                                         (regex-replace "'" type ""))))
                ((search "#" type)
                 (setf code-type (regex-replace "#" type "")))
                ((search ">>" type)
                 (setf code-type (regex-replace ">>" type "**")))
                ((search ">" type)
                 (setf code-type (regex-replace ">" type "*")))
                (t
                 (setf code-type type)))))
    (if (and (not (equal "fun" type))
             (not (is-iter-composition-p type)))
        (add-code code-type))
    ;; composition
    (if (is-iter-composition-p type)
        (progn
          (dbg "parse-variable-type: composition")
          (add-code "struct ")
          (add-code (get-iter-composition-name type))))
    ;; function
    (if (equal "fun" type)
        (if signature
            (progn
              (dbg "parse-variable-type: signature " signature)
              (dbg "parse-variable-type: signature "
                   (format nil "~a (*~a)(~a)"
                           (car (reverse signature))
                           (get-variable-name var-name)
                           (cdr (reverse signature))))
              (add-code (format nil "~a (*~a)(~a)"
                                (car (reverse signature))
                                (get-variable-name var-name)
                                (cadr (reverse signature))))
              (setf (gethash (get-variable-name var-name) *variables*) 'function))
            (progn
              (add-code "single_fn_f32")
              (setf (gethash (get-variable-name var-name) *variables*) 'function))))
    ;; errors ?
    (if (and (not type) (not (is-iter-composition-p type)))
        (error-no-type-def expr-list))
    (if (and type
             (not (is-type-p type))
             (not (is-iter-composition-p type)))
        (error-function-type-unkown expr-list type))
    ;; set type
    (setf (gethash (get-variable-name var-name) *variables*) type)
    (setf (gethash (get-variable-name var-name) *variable-type*) type)
    expr-list))
 
