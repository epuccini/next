;| Muiltiline comment
Next example file
by Edward Puccini |;

; single line comment

; (mod 10 5)
; (mod 11 (mod 15 9))
; (mod 11 (mod 15 (mod 23 4)))
; (mod (mod 15 (mod 23 4)) 11)

; [1 2 3 4 5 6];

(defn mapit:f32 [op:f32]
  (prn "Map ")
  (prnl (+ op op))
  (return (+ op op)))

(defn reduceit:f32 [op1:f32 op2:f32]
  (prn "Reduce ")
  (prnl (f32 (+ op1 op2)))
  (return (+ op1 op2)))
    
(defn do:i32 [argc:i32]
  (prnl (mapit 5.5))
  (prnl "RET")
  (let [float1:f32 0.0
        float2:f32 0.0
        array:i32# [1 2 3 4 5 6]
        values:f32# [1.0 2.0 3.0 4.0 5.0 6.0]  
        string:c8# ['a' 'b' 'c']
        myfun:fun mapit]
    (myfun 1000.0)
    (map mapit values)
    (reduce reduceit values)
    (prnl string)
    (:: float1 666.0)
    (:: argc (+ 100 (- 1000 500) 100 (* 1000 500)))
    (prnl argc)
    (:: argc (+ 100 (- 1000 999)))
    (prnl argc)
    (for [cnt:i32 0 < (max 20 10)]
      (:: (# array cnt) 1000)
      (prnfmt "%d" (^ 2 8))
      (prn "ELT: ")
      (prnfmt "%d" (# array cnt))
      (prn "CNT: ")
      (if [cnt == (max 1 3)]
        (if [cnt == 4]
          (prnl "Not possible")
          (prnl "ELSE CNT = 3!!"))
        (prnl "CNT != 3"))
      (prnl cnt))
    (prnl float1)
    (prnl float2)
    (prnl argc)
    (prnl "ENDE"))
  (prnl argc)
  (return 2))

(defn main:i32 []
  (return (do 77)))
