;| Muiltiline comment
Next example file
by Edward Puccini |;

; single line comment

; (mod 10 5)
; (mod 11 (mod 15 9))
; (mod 11 (mod 15 (mod 23 4)))
; (mod (mod 15 (mod 23 4)) 11)

; [1 2 3 4 5 6];

(module layer
    (defp test:i32 0)
        
    (defn fun1:i32 []
      (prnl "Module function fun1")
      (return 999))
        
    (defn fun2:i32 []
      (prnl "Module function fun2")
      (return 888)))

(defn mapit:f32 [op:f32]
  (prn "Map f32 ")
  (prnl (+ op op))
  (return (+ op op)))

(defn map-once:f32 [op:f32]
  (prn "Map-once f32 ")
  (prnl (+ op op))
  (return (+ op op)))

(defn map-once:i32 [op:i32]
  (prn "Map-once i32 ")
  (prnl (+ op op))
  (return (+ op op)))

(defn reduceit:f32 [op1:f32 op2:f32]
  (prn "Reduce ")
  (prnl (+ op1 op2))
  (return (+ op1 op2)))

(defn work:f32 [f:fun[f32->f32] arg:f32]
  (prnl "Work!!!")
  (return (f arg)))

(defn modules:void []
  (prnl "Modules!!!")
  (layer>>fun1)
  (layer>>fun2)
  (:: layer>>test 1000)
  (prn "Test module variable: ")
  (prnl layer>>test))
  
(defn arrays-and-lists:i32 [argc:i32]
  (prnl "Arrays and lists!!!")
  (mapit 5.5)
  (map-once 5.5)
  (map-once 5)
  (let [float1:f32 0.0
        float2:f32 (+ 10.0 10.0)
        array:i32# [1 2 3 4 5 6]
        arrayb:i32# [9 8 7 6 5 4 3 2 1]
        append-array:i32> (append array arrayb)
        rev-array:i32> (rev append-array)
        cdr-array:i32> (cdr array)
        values:f32# [1.0 2.0 3.0 4.0 5.0 6.0]
        my-new-array:f32> (mapn mapit values)
        my-new-floats:f32> (new 10)
        my-new-array2:f32> (append values 1000.0)
        my-new-array3:f32> (append my-new-array2 2000.0)
        my-list:f32' '(1.0 2.0 3.0 4.0 5.0 6.0)
        my-listb:f32' '(7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0)
        append-my-list:f32' (append my-list my-listb)
        rev-list:f32' (rev append-my-list)
        cdr-my-list:f32' (cdr my-list)
        string:string "abcdefg"
        chars:c8# ['a' 'b' 'c' 'd' 'e' 'f' 'g']
        new-string:c8# "Just a string"
        myfun:fun[f32->f32] mapit]
    (:: (f32> (# my-new-floats 0)) 888.0)
    (prn "my-new-floats set 1. element: ")
    (prnl my-new-floats)
    (prn "array: ")
    (prnl array)
    (prn "cdr-array: ")
    (prnl cdr-array)
    (prn "append-array: ")
    (prnl append-array)
    (prn "rev-array: ")
    (prnl rev-array)
    (prn "my-list: ")
    (prnl my-list)
    (prn "cdr-my-list: ")
    (prnl cdr-my-list)
    (prn "append-my-list: ")
    (prnl append-my-list)
    (prn "rev-list: ")
    (prnl rev-list)
    (prn "My new array1: ")
    (prnl my-new-array)
    (prn "My new array1 length: ")
    (prnl (len my-new-array))
    (prn "My new array2: ")
    (prnl my-new-array2)
    (prn "My new array3: ")
    (prnl my-new-array3)
    (prn "My new array3 gets array values: ")
    (:: my-new-array3 values)
    (prnl my-new-array3)
    (prn "string print to string: ")
    (prnl new-string)
    (prnstr new-string "EDWARD")
    (prnl new-string)
    (prn "My list push ")
    (push my-list 888.0)
    (prnl my-list)
    (prn "My list set/push ")
    (:: my-list (push my-list 777.0))
    (prnl my-list)
    (prn "My list length ")
    (prnl (len my-list))
    (prn "My list length after push ")
    (prnl (len (f32> (push my-list 100.0))))
    (prn "My list car ")
    (prnl (f32 (car my-list)))
    (prn "My list remove 3 ")
    (remove my-list 3)
    (prnl my-list)
    (prn "My list pop ")
    (prnl (f32 (pop my-list)))
    (prn "My list length ")
    (prnl (len my-list))
    (prn "My list append ")
    (append my-list 666.0)
    (prnl my-list)
    (prn "My list element ")
    (prnl (f32 (# my-list 3)))
    (:: (f32> (# my-list 3)) 100.0)
    (prn "My list set ")
    (prnl my-list)
    (prn "My values ")
    (prnl values)
    (myfun 1000.0)
    (work mapit 100)
    (map mapit values)
    (reduce reduceit values)
    (prn "String: ")
    (prnl string)
    (prn "Chars: ")
    (prnl chars)
    (prn "sizeof: ")
    (prnl (@ string)) 
    (:: float1 666.0)
    (:: argc (+ 100 (- 1000 500) 100 (* 1000 500)))
    (prnl argc)
    (:: argc (+ 100 (- 1000 999)))
    (prnl argc)
    (del my-new-array)
    (del my-new-floats)
    (del my-new-array2)
    (del my-new-array3)
    (for [cnt:i32 0 < (max (len array) 1)]
      (:: (# array cnt) (* cnt 1000))
      (if [(or (equal cnt 3) (== cnt 4))]
        (prnl "COUNT IS 3||4")
        (prnl "COUNT NOT 3||4"))
      (prnfmt "2^cnt = %f\n" (^ 2 cnt))
      (prnfmt "ELT = %d\n" (# array cnt))
      (prnfmt "CNT: %d\n" cnt))
    (del array)
    (prnl float1)
    (prnl float2)
    (prnl argc)
    (prnl "ENDE"))
  (prnl argc)
  (prnl "")
  (return 2))


(defn pointers:void []
  (let [value:i32 1000
        value2:i32 2000
        value3:i32 3000
        other:f32 1.0
        other_ptr:f32> (& other)
        value_ptr:i32> value
        value_ptr_ptr:i32>> value_ptr
        new_value_ptr:i32> value2]
    (prnl "Pointers!!!")
    (prn "Value ")
    (prnl value)
    (prn "Pointer print ")
    (prnl value_ptr)
    (prn "deref Pointer ")
    (prnl (i32> (? value_ptr_ptr)))
    (prn "Other value ")
    (prnl other)
    (prn "Pointer deeref ")
    (prnl (f32 (? other_ptr)))
    (prn "Value 2 ")
    (:: value2 4000)
    (prnl new_value_ptr)
    (prn "New Value Pointer: Value 3 ")
    (:: new_value_ptr (& value3))
    (prnl (i32 (? new_value_ptr)))
    (prn "New Value Pointer: Value 3/alt ")
    (prnl new_value_ptr)
    (prnl "")))

(defp param1:i32 1)
(defv param2:i32 2)

(defn math:void []
  (let [a:f64 10.0
        b:f64 20.0
        c:f64 15.5
        d:f64 (round c)]
    (defr param3:i32 3)
    (prnl "Math!!!")
    (prnl 0.5)
    (prnl 0.5d0)
    (prnl param1)
    (prnl param2)
    (prnl param3)
    (prnfmt "shift left: 1 << 8 = %d\n" (<< 1 8))
    (prn "d = round(c) = ")
    (prnl d)
    (prn "exp(a) = ")
    (prnl (exp a))
    (prn "sin(b) = ")
    (prnl (sin b))
    (prnl "")
    (prn "100.0 * cos(35) = ")
    (prnl (f64 (* 100.0 (cos 35.0))))
    ;; just a comment
    (if [> a (not 0)]
      (prnl "a > not 0"))
    (prnl "")))

(compose monolith
        [string:string
         a:i32
         b:f32])

(compose betalith
         [d:f64
          e:f80
          g:monolith])

(compose deltalith
         [h:string
          i:file
          j:betalith])

(defn compositions:void []
  (let [mono:monolith {0}
        beta:betalith {0}
        delta:deltalith {0}]
    (prnl "Composition!!!")
    (:: (i32> (ref (of mono a))) 1000)
    (prn "mono.a = ")
    (prnl (i32 (of mono a)))
    (:: (i32> (ref mono>>a)) 2000)
    (:: mono>>a 3000)
    (prn "mono.a = ")
    (prnl mono>>a)
    (prnl "")
    (prn "beta.g.a = ")
    (:: (i32> (ref (of (of beta g) a))) 9000)
    (prnl (i32 (of (of beta g) a)))
    (prn "beta.g.a = ")
    (:: beta>>g>>a 8000)
    (prnl beta>>g>>a)
    (prn "delta.j.g.a = ")
    (:: delta>>j>>g>>a 5000)
    (prnl delta>>j>>g>>a)
    (prnl "")))

(defn files:void []
  (let [read-name:string "output.h"
        write-name:string "temp.txt"
        mode-read:string "r"
        mode-write:string "w"
        test-file:file (open read-name mode-read)
        line:string (c8> 1)]
    (prnl "files!!!")
    (while [!= line 0]
      (:: line (read-line test-file))
      (prn "line: ")
      (prn line)
      (del line))
    (close test-file)
    (prnl "\nRead sussess!")
    (:: test-file (open write-name mode-write))
    (write-line test-file "TEST")
    (close test-file)
    (prnl "Write sussess!")
    (prnl "")))

(defn pidigits:i32 []
  (let [max:i32 5600
        r:i32> (new_i32 (+ max 1))
        b:i32 0 d:i32 0 c:i32 0]
    
    (for [i:i32 0 < max]
      (:: (# r i) 2000))
    
    (for [k:i32 max > 0]
      (:: d 0)
      (:: i k)
      (for [] 
        (:: d (+ d (* (# r i) 10000)))
        (:: b (- (* 2 i) 1))
        (:: (# r i) (% d b))
        (:: d (/ d b))
        (:: i (- i 1))
        (if [== i 0]
          (break))
        (:: d (* d i)))
      (prnfmt "%.4d" (i32 (+ c (/ d 10000))))
      (if [== (mod k 10) 0]
        (prnfmt " %d\n" (/ (- max k) 7)))
      (:: c (% d 10000))
      (:: k (- k 13)))
    (prnl "")
    (return 0)))

(defn bigints:void []
  (let [value1:ixx 5000
        value2:ixx 2
        value3:ixx 3
        value4:i64 B5000
        value5:ixx (+ 100 100)]
    (prnl "Bigints!!!")
    (prnl B10000)
    (prn "Value1: ")
    (prnl value1)
    (prn "Value2: ")
    (prnl value2)
    (prn "Value3: ")
    (prnl value3)
    (prn "Value4: ")
    (prnl value4)
    (prnl (ixx (+ value1 B500 value2 value3 1000)))
    (prnl (ixx (- value1 (* value1 value2) value2)))
    (prnl (ixx (* value1 value2)))
    (prnl (ixx (/ value1 value2)))
    (prnl (* (/ 100000 100) (- 1000 500) (sqrt 9)))
    (prnl (* (/ 100000 100) (- 1000 B500) (sqrt 9)))
    (prnl (* 10 (^ 2 64)))
    (prnl (* B10 (^ 2 64)))
    (:: value1 (* 990 B1000))
    (prn "Value1 redef: ")
    (prnl value1)
    (prnl (f64 (* (/ 100000 100) (- 1000 B500))))
    (prnl (ixx (* (/ B100000 100) (- B1000 B500))))
    (prnl (ixx (* (ixx (/ B100000 B100)) (ixx (- B1000 B500)))))))
        
(defn main:i32 []
  (let [ret:i32 (arrays-and-lists 77)]
    (layer>>fun1)
    (layer>>fun2)
    (prnl "")
    (pointers)
    (math)
    (compositions)
    (files)
    (pidigits)
    (modules)
    (bigints)
    (return ret)))
