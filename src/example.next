;| Muiltiline comment
Next example file
by Edward Puccini |;

; single line comment

; (mod 10 5)
; (mod 11 (mod 15 9))
; (mod 11 (mod 15 (mod 23 4)))
; (mod (mod 15 (mod 23 4)) 11)

; [1 2 3 4 5 6];

(module layer
    (defn fun1:i32 []
      (prnl "Module function fun1")
      (return 999))
        
    (defn fun2:i32 []
       (fun1)
       (prnl "Module function fun2")
      (return 888)))

(defn mapit:f32 [op:f32]
  (prn "Map ")
  (prnl (+ op op))
  (return (+ op op)))

(defn reduceit:f32 [op1:f32 op2:f32]
  (prn "Reduce ")
  (prnl (f32 (+ op1 op2)))
  (return (+ op1 op2)))

(defn work:void [f:fun[f32->f32] arg:i32]
  (prnfmt "%f" (f arg)))

(defn do:i32 [argc:i32]
  (mapit 5.5)
  (prnl "RET")
  (layer>>fun1)
  (layer>>fun2)
  (let [float1:f32 0.0
        float2:f32 (+ 0.0 0.0)
        array:i32# [1 2 3 4 5 6]
        values:f32# [1.0 2.0 3.0 4.0 5.0 6.0]
        my-new-array:f32> (mapn mapit values)
        my-new-floats:f32> (new_f32 10)
        my-list:i32' '(1 2 3 4 5 6)
        string:string "abc"
        chars:c8# ['a' 'b' 'c']
        myfun:fun[f32->f32] mapit]
    (:: (f32> (# my-new-array 0)) 888.0)
    (prn "My new array / first element is: ")
    (prnl (f32 (# my-new-array 0)))
    (myfun 1000.0)
    (work mapit 100)
    (map mapit values)
    (reduce reduceit values)
    (prn "String: ")
    (prnl string)
    (prn "Chars: ")
    (prnl chars)
    (prn "sizeof: ")
    (prnl (@ string)) 
    (:: float1 666.0)
    (:: argc (+ 100 (- 1000 500) 100 (* 1000 500)))
    (prnl argc)
    (:: argc (+ 100 (- 1000 999)))
    (prnl argc)
    (for [cnt:i32 0 < (max 20 10)]
      (:: (# array cnt) 1000)
      (prnfmt "%d" (^ 2 8))
      (prn "ELT: ")
      (prnfmt "%d" (# array cnt))
      (prn "CNT: ")
      (if [cnt == (max 1 3)]
        (if [cnt == 4]
          (prnl "Not possible")
          (prnl "ELSE CNT = 3!!"))
        (prnl "CNT != 3"))
      (prnl cnt))
    (prnl float1)
    (prnl float2)
    (prnl argc)
    (prnl "ENDE"))
  (prnl argc)
  (return 2))

  (do 77)
