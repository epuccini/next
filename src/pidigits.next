(defp acc:ixx 0)
(defp den:ixx 1)
(defp num:ixx 1)

(defn extract-digit:ixx [nth:ixx]
  (return (/ (+ (* num nth) acc) den)))

(defn eliminate-digit:void [d:ixx]
  (:: acc (- acc (* den d)))
  (:: acc (* acc B10))
  (:: num (* num B10)))

(defn next-term:void [k:ixx]
  (let [k2:ixx (+ B1 (* k B2))]
    (:: acc (+ acc (* num B2)))
    (:: acc (* acc k2))
    (:: den (* den k2))
    (:: num (* num k))))

(defn main:i32 [argc:i32 argv:string>]
  (let [d:ixx B0 k:ixx B0 i:ixx B0 n:ixx B10000]
    (while [< i n]
      (:: k (+ k 1))
      (next-term k)
      (if [> num acc]
        (continue))

      (:: d (extract-digit 3))
      (if [!= d (extract-digit 4)]
        (continue))
      
      (prn d)
      (prn " ")
      (:: i (+ 1 i))      
      (if [== (mod i B10) B0]
        (prnl i))
      (eliminate-digit d))
  (return 0)))
    
