(defp acc:f64 0)
(defp den:f64 1)
(defp num:f64 1)

(defn extract-digit:f64 [nth:ui64]
  (return (trunc (/ (+ (* num nth) acc) den))))

(defn eliminate-digit:void [d:ui64]
  (:: acc (- acc (* den d)))
  (:: acc (* acc 10))
  (:: num (* num 10)))

(defn next-term:void [k:ui64]
  (let [k2:ui64 (+ 1 (* k 2))]
    (:: acc (+ acc (* num 2)))
    (:: acc (* acc k2))
    (:: den (* den k2))
    (:: num (* num k))))

(defn main:i32 [argc:i32 argv:string>]
  (let [d:ui64 0 k:ui64 0 i:ui64 0 n:ui64 10000]
    (:: n 10000)
    (while [i < n]
      (:: k (+ k 1))
      (next-term k)
      (if [num > acc]
        (continue))
      
      (:: d (extract-digit 3))
      (if [d != (extract-digit 4)]
        (continue))
      
      (prn d)
      (prn " ")
      (:: i (+ 1 i))
      (if [(mod i 10) == 0]
        (prnl i))
      (eliminate-digit d))
  (return 0)))
    
